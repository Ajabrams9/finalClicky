{"version":3,"sources":["components/Header/index.js","components/Board/index.js","image.js","App.js","registerServiceWorker.js","index.js"],"names":["Header","props","react_default","a","createElement","className","message","score","total","Board","id","images","map","image","style","backgroundColor","color","key","index","onClick","clickHandler","App","state","clicked","handleImageClickById","imageId","_this","slice","console","log","findIndex","item","push","setState","sort","Math","random","components_Header","this","length","components_Board","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.00e220e2.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Header(props) {\r\n    return (<header>\r\n    <div className=\"title\">Clicky Game</div>\r\n    <div className=\"message\">{props.message}</div>\r\n    <div className=\"score\">{props.score} of {props.total}</div>\r\n  </header>)\r\n\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\n\r\nfunction Board(props) {\r\n    return <div id=\"board\">\r\n    {props.images.map(image => (\r\n      <div style={{backgroundColor: image.color}} className=\"image\" id={\"image-\" + image} key={image.index} onClick={() => {props.clickHandler(image.index)}} ></div>\r\n    ))}\r\n  </div>\r\n  }\r\n  \r\n  export default Board;","const images = [{color: \"red\", index: 1}, {color: \"blue\", index: 2}, {color: \"green\", index: 3}, {color: \"yellow\", index: 4}, {color: \"azure\", index: 5} ];\r\n\r\nexport default images;","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Header from \"./components/Header\";\nimport Board from \"./components/Board\"\nimport images from './image'\n\nclass App extends Component {\n  state = {\n    \"message\": \"Click an image to start\",\n    \"score\": 0,\n    \"images\": images,\n    \"clicked\": []\n  };\n\n  handleImageClickById = (imageId) => {\n    let clicked = this.state.clicked.slice(0);\n    console.log(\"Checking\", clicked, imageId);\n    // is this imageId in clicked\n    if (clicked.findIndex(item => imageId === item) === -1){\n      clicked.push(imageId);\n      this.setState({\n        \"clicked\": clicked,\n        \"score\": this.state.score + 1,\n        \"message\": \"Good guess, keep going\"\n      })\n    } else {\n      // you lose, start over\n      this.setState({\n        \"message\": \"You Lose, start over\",\n        \"score\": 0,\n        \"clicked\": []\n      })\n    }\n    // rearrange images\n    let images = this.state.images.slice(0);\n    images.sort(() => Math.random() - 0.5);\n    this.setState({images});\n    console.log(\"handling click for \",imageId);\n    \n  } \n\n  render() {\n    return (\n      <div className=\"App\">\n        <Header \n        message={this.state.message}\n        score={this.state.score}\n        total={this.state.images.length} />\n        <Board \n          images={this.state.images}\n          clickHandler={this.handleImageClickById}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log(\"New content is available; please refresh.\");\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport registerServiceWorker from \"./registerServiceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nregisterServiceWorker();\n"],"sourceRoot":""}